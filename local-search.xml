<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Combinations of Max-Heap and Min-Heap</title>
    <link href="/2022/05/13/Combinations%20of%20Max-Heap%20and%20Min-Heap/"/>
    <url>/2022/05/13/Combinations%20of%20Max-Heap%20and%20Min-Heap/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Black Box is a primitive database. It can store an array of integers, and there is a special variable $i$. At the beginning, the Black Box is empty. And $i&#x3D;0$. This Black Box has to process a bunch of commands.</p><p>There are only two operations:</p><ul><li><p><code>ADD(x)</code>: put $x$ into Black Box;</p></li><li><p><code>GET</code>: add $1$ to $i$, and output the smallest $i$ number in the Black Box.</p></li></ul><p>Remember: the smallest $i$ number is the $i$th element of the numbers in the Black Box sorted from small to large.</p><p>Let’s demonstrate with 11 operations. (As shown in the table below)</p><table><thead><tr><th align="center">No.</th><th align="left">Operation</th><th align="center">$i$</th><th>Database</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><code>ADD(3)</code></td><td align="center">$0$</td><td>$3$</td><td align="center">&#x2F;</td></tr><tr><td align="center">2</td><td align="left"><code>GET</code></td><td align="center">$1$</td><td>$3$</td><td align="center">$3$</td></tr><tr><td align="center">3</td><td align="left"><code>ADD(1)</code></td><td align="center">$1$</td><td>$1,3$</td><td align="center">&#x2F;</td></tr><tr><td align="center">4</td><td align="left"><code>GET</code></td><td align="center">$2$</td><td>$1,3$</td><td align="center">$3$</td></tr><tr><td align="center">5</td><td align="left"><code>ADD(-4)</code></td><td align="center">$2$</td><td>$-4,1,3$</td><td align="center">&#x2F;</td></tr><tr><td align="center">6</td><td align="left"><code>ADD(2)</code></td><td align="center">$2$</td><td>$-4,1,2,3$</td><td align="center">&#x2F;</td></tr><tr><td align="center">7</td><td align="left"><code>ADD(8)</code></td><td align="center">$2$</td><td>$-4,1,2,3,8$</td><td align="center">&#x2F;</td></tr><tr><td align="center">8</td><td align="left"><code>ADD(-1000)</code></td><td align="center">$2$</td><td>$-1000,-4,1,2,3,8$</td><td align="center">&#x2F;</td></tr><tr><td align="center">9</td><td align="left"><code>GET</code></td><td align="center">$3$</td><td>$-1000,-4,1,2,3,8$</td><td align="center">$1$</td></tr><tr><td align="center">10</td><td align="left"><code>GET</code></td><td align="center">$4$</td><td>$-1000,-4,1,2,3,8$</td><td align="center">$2$</td></tr><tr><td align="center">11</td><td align="left"><code>ADD(2)</code></td><td align="center">$4$</td><td>$-1000,-4,1,2,2,3,8$</td><td align="center">&#x2F;</td></tr></tbody></table><p>There are $m$ of <code>ADD</code> operations and $n$ of <code>GET</code> operations. Now use two integer arrays to represent the command string:</p><ol><li><p>$a_1,a_2,\cdots,a_m$: elements that will be put into the Black Box. For example, $a&#x3D;[3,1,-4,2,8,-1000,2]$ in the above example.</p></li><li><p>$u_1,u_2,\cdots,u_n$: means that a <code>GET</code> operation will appear after the $u_i$th element is put into the Black Box. For example $u&#x3D;[1,2,6,6]$ in the above example.</p></li></ol><h3 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h3><p>The first line contains two integers $m$ and $n$, indicating the number of elements and the number of <code>GET</code> operations.</p><p>The second line has a total of $m$ integers, and the $i$ integer from left to right is $a_i$, separated by spaces.</p><p>The third line has a total of $n$ integers, and the $i$ integer from left to right is $u_i$, separated by spaces.</p><h3 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h3><p>Output the string obtained by Black Box according to the operations, one number per line.</p><h3 id="Example-Input"><a href="#Example-Input" class="headerlink" title="Example Input"></a>Example Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span> -<span class="hljs-number">1000</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="Example-Output"><a href="#Example-Output" class="headerlink" title="Example Output"></a>Example Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>3<br>1<br>2<br></code></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>For tracking the top minimal values of a number array, we could utilize both max-heap and min-heap. Specifically, the max-heap stores the top $k$ minimal values of the array, while the min-heap stores the rest value. The important detail here is $k$ is set to $1$ initially and increases by $1$ after every operation <code>GET</code>. So the root of the max-heap could keep the $kth$ minimal value of the array which is expected every time it operates <code>GET</code>.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOCAL</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinHeap</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        vec.<span class="hljs-built_in">push_back</span>(x);<br><br>        <span class="hljs-type">int</span> curr = vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, par;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-number">0</span>)<br>        &#123;<br>            par = (curr - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (vec[par] &lt;= vec[curr])<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span> (vec[par] &gt; vec[curr])<br>            &#123;<br>                <span class="hljs-type">int</span> tmp = vec[curr];<br>                vec[curr] = vec[par];<br>                vec[par] = tmp;<br>            &#125;<br>            curr = par;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> popping = vec[<span class="hljs-number">0</span>];<br>        vec[<span class="hljs-number">0</span>] = vec[vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br>        vec.<span class="hljs-built_in">pop_back</span>();<br><br>        <span class="hljs-type">int</span> curr = <span class="hljs-number">0</span>, next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> child1 = curr * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> child2 = curr * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (child1 &gt;= vec.<span class="hljs-built_in">size</span>() &amp;&amp; child2 &gt;= vec.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child1 &lt; vec.<span class="hljs-built_in">size</span>() &amp;&amp; child2 &lt; vec.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span> (vec[child1] &lt; vec[child2])<br>                    next = child1;<br>                <span class="hljs-keyword">else</span><br>                    next = child2;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child1 &lt; vec.<span class="hljs-built_in">size</span>())<br>                next = child1;<br>            <span class="hljs-keyword">else</span><br>                next = child2;<br><br>            <span class="hljs-keyword">if</span> (vec[curr] &lt;= vec[next])<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> tmp = vec[next];<br>                vec[next] = vec[curr];<br>                vec[curr] = tmp;<br>            &#125;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> popping;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxHeap</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; vec;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        vec.<span class="hljs-built_in">push_back</span>(x);<br><br>        <span class="hljs-type">int</span> curr = vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, par;<br>        <span class="hljs-keyword">while</span> (curr != <span class="hljs-number">0</span>)<br>        &#123;<br>            par = (curr - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (vec[par] &gt;= vec[curr])<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span> (vec[par] &lt; vec[curr])<br>            &#123;<br>                <span class="hljs-type">int</span> tmp = vec[curr];<br>                vec[curr] = vec[par];<br>                vec[par] = tmp;<br>            &#125;<br>            curr = par;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> popping = vec[<span class="hljs-number">0</span>];<br>        vec[<span class="hljs-number">0</span>] = vec[vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br>        vec.<span class="hljs-built_in">pop_back</span>();<br><br>        <span class="hljs-type">int</span> curr = <span class="hljs-number">0</span>, next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> child1 = curr * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> child2 = curr * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (child1 &gt;= vec.<span class="hljs-built_in">size</span>() &amp;&amp; child2 &gt;= vec.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child1 &lt; vec.<span class="hljs-built_in">size</span>() &amp;&amp; child2 &lt; vec.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span> (vec[child1] &gt; vec[child2])<br>                    next = child1;<br>                <span class="hljs-keyword">else</span><br>                    next = child2;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child1 &lt; vec.<span class="hljs-built_in">size</span>())<br>                next = child1;<br>            <span class="hljs-keyword">else</span><br>                next = child2;<br><br>            <span class="hljs-keyword">if</span> (vec[curr] &gt;= vec[next])<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> tmp = vec[next];<br>                vec[next] = vec[curr];<br>                vec[curr] = tmp;<br>            &#125;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> popping;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-type">int</span> m, n, tmp;<br>    vector&lt;<span class="hljs-type">int</span>&gt; numbers, thresholds;<br><br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        cin &gt;&gt; tmp;<br>        numbers.<span class="hljs-built_in">push_back</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; tmp;<br>        thresholds.<span class="hljs-built_in">push_back</span>(tmp);<br>    &#125;<br><br>    MaxHeap maxheap;<br>    MinHeap minheap;<br><br>    <span class="hljs-type">int</span> volumn = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : thresholds)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; t)<br>        &#123;<br><br>            <span class="hljs-keyword">if</span> (maxheap.vec.<span class="hljs-built_in">size</span>() &lt; volumn)<br>                maxheap.<span class="hljs-built_in">add</span>(numbers[i]);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                minheap.<span class="hljs-built_in">add</span>(numbers[i]);<br>                <span class="hljs-keyword">while</span> (minheap.vec[<span class="hljs-number">0</span>] &lt; maxheap.vec[<span class="hljs-number">0</span>])<br>                &#123;<br>                    <span class="hljs-type">int</span> n1 = minheap.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-type">int</span> n2 = maxheap.<span class="hljs-built_in">pop</span>();<br>                    minheap.<span class="hljs-built_in">add</span>(n2);<br>                    maxheap.<span class="hljs-built_in">add</span>(n1);<br>                &#125;<br>            &#125;<br>            i++;<br>        &#125;<br><br>        cout &lt;&lt; maxheap.vec[<span class="hljs-number">0</span>] &lt;&lt; endl;<br><br>        volumn++;<br>        <span class="hljs-keyword">if</span>(minheap.vec.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">0</span>)<br>            maxheap.<span class="hljs-built_in">add</span>(minheap.<span class="hljs-built_in">pop</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fast I/O in Competitive Programming</title>
    <link href="/2022/04/20/Fast%20IO%20in%20Competitive%20Programming/"/>
    <url>/2022/04/20/Fast%20IO%20in%20Competitive%20Programming/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In competitive programming, it is critical to read input as quickly as possible in order to save significant time. You’ve probably seen problem statements like this: “Warning: Large I&#x2F;O data, be careful with certain languages (though most should be OK if the algorithm is well designed and has low time complexity)”. The key for such problems is to use Faster I&#x2F;O techniques. </p><h2 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h2><p>For rapid input and output, <code>scanf</code> and <code>printf</code> are frequently suggested over cin&#x2F;cout. However, by putting the following two lines in your <code>main()</code> method, you may still utilize <code>cin</code> and <code>cout</code> and obtain the same speed as <code>scanf</code> and <code>printf</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>It toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding <code>ios_base::sync_with_stdio (false);</code> (which is true by default) before any I&#x2F;O operation avoids this synchronization.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>tie() is a function that simply ensures that <code>std::cout</code> is flushed before <code>std::cin</code> takes an input. This is useful for interactive console programs that require the console to be constantly updated, but it slows the program down for massive I&#x2F;O.</p><p>So your competitive programming template might look like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>It is recommended to use <code>cout &lt;&lt; &quot;\n&quot;</code> instead of <code>cout &lt;&lt; endl</code>. <code>endl</code> is slower because it forces a flushing stream, which is usually unnecessary. (You’d need to flush if you were writing, say, an interactive progress bar, but not when writing a million lines of data.) So write <code>&quot;\n&quot;</code> instead of endl.</p><h2 id="Method-2-Fastest"><a href="#Method-2-Fastest" class="headerlink" title="Method 2 (Fastest)"></a>Method 2 (Fastest)</h2><p>If the preceding methods are not fast enough, here is an exclusive code to read and write integers as quickly as possible.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 快读快写</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// r是存的这个数的绝对值 w是存的这个数是正数还是负数</span><br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();         <span class="hljs-comment">// ch为当前读入的字符</span><br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-comment">//如果当前读入的字符不是数字，就一直读入，直到读入的是数字为止</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            w = <span class="hljs-number">-1</span>; <span class="hljs-comment">//如果读到了&#x27;-&#x27;，就说明这是个负数</span><br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-comment">//运行到这里时ch里面一定是个整数</span><br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-comment">//当读入的字符是数字时一直读入</span><br>    &#123;<br>        r = r * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>) + r * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) + ch - (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) - (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>); <span class="hljs-comment">//存入当前这个数字，由于ch是个字符，所以存入的时候要减去字符0的ASCLL码</span><br>        <span class="hljs-comment">// 1&lt;&lt;3是8,1&lt;&lt;1是2,加起来就是10   1&lt;&lt;4是16，1&lt;&lt;5是32，加起来就是0的ASCLL码48</span><br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> r * w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// ch里面存的是从低到高的数字的ASCII码 len是数组长度</span><br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//如果x是负数，那么先输出负号，再把x变成正数</span><br>    &#123;<br>        <span class="hljs-built_in">putchar</span>((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//(1&lt;&lt;5)+(1&lt;&lt;3)+(1&lt;&lt;2)+1就是&#x27;-&#x27;的ASCII码值</span><br>        x = ~x + <span class="hljs-number">1</span>; <span class="hljs-comment">// x=~x+1;就等同于x=-x;</span><br>    &#125;<br>    <span class="hljs-keyword">do</span> <span class="hljs-comment">//用do while可以防止x=0的特殊情况</span><br>    &#123;<br>        ch[len++] = x % <span class="hljs-number">10</span> + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>) + (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>); <span class="hljs-comment">//取出最低位存到ch数组里面 因为ch是字符数组，所以要加上0的ASCII码</span><br>        x /= <span class="hljs-number">10</span>;                                  <span class="hljs-comment">//砍掉最低位</span><br>    &#125; <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>);                              <span class="hljs-comment">//当x&gt;0的时候每次把x的最低位取出</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)            <span class="hljs-comment">//因为ch是从低到高存的x的绝对值，又因为要从高到低输出，所以倒着循环ch数组输出</span><br>        <span class="hljs-built_in">putchar</span>(ch[i]);                           <span class="hljs-comment">//输出从高到低的每一位</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sparse Table and Range Minimum Query</title>
    <link href="/2022/03/10/Sparse%20Table%20and%20Range%20Minimum%20Query/"/>
    <url>/2022/03/10/Sparse%20Table%20and%20Range%20Minimum%20Query/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>We have an array <code>arr[0... n-1]</code>. We should be able to discover the smallest number from index $L$ (query start) to index $R$ (query end) where $0 ≤ L ≤ R ≤ n-1$. Consider the following scenario with a large number of range queries:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">Input:  arr<span class="hljs-comment">[]</span>   = &#123;7, 2, 3, 0, 5, 10, 3, 12, 18&#125;;<br>        query<span class="hljs-comment">[]</span> = <span class="hljs-comment">[0, 4]</span>, <span class="hljs-comment">[4, 7]</span>, <span class="hljs-comment">[7, 8]</span><br><br>Output: Minimum <span class="hljs-keyword">of</span> <span class="hljs-comment">[0, 4]</span> <span class="hljs-keyword">is</span> 0<br>        Minimum <span class="hljs-keyword">of</span> <span class="hljs-comment">[4, 7]</span> <span class="hljs-keyword">is</span> 3<br>        Minimum <span class="hljs-keyword">of</span> <span class="hljs-comment">[7, 8]</span> <span class="hljs-keyword">is</span> 12<br></code></pre></td></tr></table></figure><p>This is the <strong>Range Minimum Query</strong> problem. A brute force solution is to run a loop from $L$ to $R$ and find the minimum element in the given range. This solution takes $O(n)$ time to query in the worst case.</p><h2 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h2><p>A Simple Solution is to create a 2D array <code>lookup[][]</code> where an entry <code>lookup[i][j]</code> stores the minimum value in range <code>arr[i..j]</code>. The minimum of a given range can now be calculated in $O(1)$ time.</p><p><img src="/img/RMQ_simple.png" alt="Lookup Table"></p><p>This approach supports queries in $O(1)$, but preprocessing takes $O(n^2)$ time. Also, this approach needs $O(n)$ extra space which may become huge for large input arrays.</p><h2 id="Method-2-Sparse-Table"><a href="#Method-2-Sparse-Table" class="headerlink" title="Method 2 (Sparse Table)"></a>Method 2 (Sparse Table)</h2><p>The idea is to precompute a minimum of all subarrays of size $2^j$ where j varies from 0 to $log_n$. Like method 1, we make a lookup table. Here <code>lookup[i][j]</code> contains a minimum of range starting from i and of size $2^j$. For example <code>lookup[0][3]</code> contains a minimum of range [0, 7] (starting with 0 and of size $2^3$).</p><h3 id="Preprocessing"><a href="#Preprocessing" class="headerlink" title="Preprocessing"></a>Preprocessing</h3><p>How should this lookup table be filled? The concept is straightforward: fill from the bottom up using previously computed data. To obtain a minimum of range [0, 7], for example, we can utilize the minimum of the two following.</p><p>a) Minimum of range [0, 3]</p><p>b) Minimum of range [4, 7]</p><p>Based on the above example, below is the transferring formula,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;<span class="hljs-built_in">len</span>(lookup[<span class="hljs-number">0</span>]); j++)&#123;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i+<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,j)<span class="hljs-number">-1</span>&lt;<span class="hljs-built_in">len</span>(lookup); i++)&#123;<br>      lookup[i][j] = <span class="hljs-built_in">min</span>(lookup[i][j<span class="hljs-number">-1</span>], lookup[i+<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,j)<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/RMQ_SparseTable.png" alt="Lookup Table"></p><p>Since it precompute a minimum of all subarrays of size $2^j$ where j varies from 0 to $log_n$. the time complexity of the preprocessing is $O(nlog_n)$.</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>We must employ ranges in powers of 2 for any arbitrary range [L, R]. The goal is to use the nearest power of two. We must always make at least one comparison (compare a minimum of two ranges which are powers of 2). One set of numbers begins with L and concludes with “L + closest-power-of-2”. The alternative range begins with “R - same-closest-power-of-2 + 1” and ends at R. For instance, if the specified range is (2, 10), we compare at least two ranges (2, 9) and (3, 10).</p><p>Based on the preceding example, the formula is as follows:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">j = <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">log</span>(R-L+<span class="hljs-number">1</span>));<br><br><span class="hljs-keyword">if</span> arr[lookup[L][j]] &lt;= arr[lookup[R-(<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,j)+<span class="hljs-number">1</span>][j]]<br>   <span class="hljs-built_in">RMQ</span>(L, R) = lookup[L][j];<br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">RMQ</span>(L, R) = lookup[R-(<span class="hljs-type">int</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,j)+<span class="hljs-number">1</span>][j];<br></code></pre></td></tr></table></figure><p>Since we do only one comparison, the time complexity of the query is $O(1)$. </p><p>So sparse table method supports query operation in $O(1)$ time with $O(n log n)$ preprocessing time and $O(n log n)$ space.</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Templates for Competitive Programming</title>
    <link href="/2022/02/23/Templates%20for%20Competitive%20Programming/"/>
    <url>/2022/02/23/Templates%20for%20Competitive%20Programming/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The International Collegiate Programming Contest is an algorithmic programming contest for college students. Teams of three students, each representing their university, compete to find solutions to the toughest challenges in the real world while encouraging teamwork, inventiveness, and the capacity to work under pressure. </p><p>We could create some time-saving templates in advance because every second of the game is valuable.</p><p><img src="/img/acmicpc.jpg" alt="ACM/ICPC"></p><h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOCAL</span><br><span class="hljs-comment">// STL库常用(vector, map, set, pair)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdd pair<span class="hljs-string">&lt;double, double&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> F first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S second</span><br><span class="hljs-comment">//常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI (acos(-1.0))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> db;<br><span class="hljs-comment">// 快读快输</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    T x = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>    &#123;<br>        x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>);<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> f ? ~x + <span class="hljs-number">1</span> : x;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(T k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>, ch[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    (k &lt; <span class="hljs-number">0</span>) &amp;&amp; (<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), k = -k);<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>)<br>        ch[++num] = k % <span class="hljs-number">10</span>, k /= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (num)<br>        <span class="hljs-built_in">putchar</span>(ch[num--] + <span class="hljs-number">48</span>);<br>&#125;<br><span class="hljs-comment">//图论</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> GRAPHN = <span class="hljs-number">1</span>, GRAPHM = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h[GRAPHN], e[GRAPHM], ne[GRAPHM], wei[GRAPHM], idx;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; e[idx] = b, ne[idx] = h[a], h[a] = idx++; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123; e[idx] = b, ne[idx] = h[a], wei[idx] = c, h[a] = idx++; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> h[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; e[idx] = b, ne[idx] = h[a], h[a] = idx++; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> h[], <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123; e[idx] = b, ne[idx] = h[a], wei[idx] = c, h[a] = idx++; &#125;<br><span class="hljs-comment">// 数学公式</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">gcd</span><span class="hljs-params">(T a, T b)</span> </span>&#123; <span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b); &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">lowbit</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; (-x); &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">mishu</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span> ? (x &amp; (x - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span> : <span class="hljs-literal">false</span>; &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T1, <span class="hljs-keyword">typename</span> T2, <span class="hljs-keyword">typename</span> T3&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">q_mul</span><span class="hljs-params">(T1 a, T2 b, T3 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll w = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            w = (w + a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (a + a) % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> w;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> T2&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">f_mul</span><span class="hljs-params">(T a, T b, T2 p)</span> </span>&#123; <span class="hljs-keyword">return</span> (a * b - (ll)((<span class="hljs-type">long</span> <span class="hljs-type">double</span>)a / p * b) * p + p) % p; &#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T1, <span class="hljs-keyword">typename</span> T2, <span class="hljs-keyword">typename</span> T3&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">q_pow</span><span class="hljs-params">(T1 a, T2 b, T3 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll w = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            w = (w * a) % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (a * a) % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> w;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T1, <span class="hljs-keyword">typename</span> T2, <span class="hljs-keyword">typename</span> T3&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">s_pow</span><span class="hljs-params">(T1 a, T2 b, T3 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll w = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            w = <span class="hljs-built_in">q_mul</span>(w, a, p);<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = <span class="hljs-built_in">q_mul</span>(a, a, p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> w;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ex_gcd</span><span class="hljs-params">(T a, T b, T &amp;x, T &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>    &#123;<br>        x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> (ll)a;<br>    &#125;<br>    ll r = <span class="hljs-built_in">ex_gcd</span>(b, a % b, y, x);<br>    y -= a / b * x;<br>    <span class="hljs-keyword">return</span> r; <span class="hljs-comment">/*gcd*/</span><br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T1, <span class="hljs-keyword">typename</span> T2&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">com</span><span class="hljs-params">(T1 m, T2 n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k &lt;= n)<br>    &#123;<br>        ans = ((m - k + <span class="hljs-number">1</span>) * ans) / k;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">isprime</span><span class="hljs-params">(T n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">6</span> != <span class="hljs-number">1</span> &amp;&amp; n % <span class="hljs-number">6</span> != <span class="hljs-number">5</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    T n_s = <span class="hljs-built_in">floor</span>(<span class="hljs-built_in">sqrt</span>((db)(n)));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; i &lt;= n_s; i += <span class="hljs-number">6</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span> || n % (i + <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*------------------------------------------------------------------------------------------ */</span><br><span class="hljs-comment">/*------------------------------------------------------------------------------------------ */</span><br><span class="hljs-comment">/*------------------------------------------------------------------------------------------ */</span><br><span class="hljs-comment">/*------------------------------------------------------------------------------------------ */</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">6e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, v;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>) : <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">v</span>(v) &#123;&#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> x &lt; a.x; &#125;<br>&#125; a[MAXN];<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-9</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sgn</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> a)</span> </span>&#123; <span class="hljs-keyword">return</span> a &lt; -eps ? <span class="hljs-number">-1</span> : a &gt; eps ? <span class="hljs-number">1</span><br>                                                        : <span class="hljs-number">0</span>; &#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">double</span> lM, rM;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Cal</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    lM = <span class="hljs-number">0</span>, rM = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (a[i].x &gt; x)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span><br>            lM = <span class="hljs-built_in">max</span>(lM, (x - a[i].x) / a[i].v);<br>    <span class="hljs-keyword">for</span> (; i &lt;= n; i++)<br>        rM = <span class="hljs-built_in">max</span>(rM, (a[i].x - x) / a[i].v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Check</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">double</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Cal</span>(mid);<br>    <span class="hljs-keyword">return</span> lM &gt; rM ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br>    <span class="hljs-type">clock_t</span> c1 = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">// code here</span><br>    <span class="hljs-comment">//--------------------------------------------</span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i].x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i].v);<br>    <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + n);<br>    <span class="hljs-type">long</span> <span class="hljs-type">double</span> l = a[<span class="hljs-number">1</span>].x, r = a[n].x;<br>    rM = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">sgn</span>(l - r))<br>    &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Check</span>(mid))<br>            l = mid;<br>        <span class="hljs-keyword">else</span><br>            r = mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.9Lf&quot;</span>, lM);<br><br>    <span class="hljs-comment">//--------------------------------------------</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Time Used:&quot;</span> &lt;&lt; <span class="hljs-built_in">clock</span>() - c1 &lt;&lt; <span class="hljs-string">&quot;ms&quot;</span> &lt;&lt; endl;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Deploy a Personal Blog with Github and Hexo</title>
    <link href="/2022/01/07/Deploy%20a%20Personal%20Blog%20with%20Github%20and%20Hexo/"/>
    <url>/2022/01/07/Deploy%20a%20Personal%20Blog%20with%20Github%20and%20Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I have recently deployed my personal blog with GitHub and Hexo, which supports continuous deployment when pushing code to GitHub. It’s free, convenient and, most importantly, enjoyable to set up! Let’s dive in!</p><p><img src="/img/github_page.jpg" alt="Github"></p><h2 id="Set-up-Hexo-Locally"><a href="#Set-up-Hexo-Locally" class="headerlink" title="Set up Hexo Locally"></a>Set up Hexo Locally</h2><ul><li><p>Download and implement <a href="https://nodejs.org/en/download/">Node.js</a> on the laptop, in which I use the operating system of Windows.</p></li><li><p>Execute the following bash in the command line to check if Node.js is installed correctly and install the hexo toolkit.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>Initialize Hexo blog locally and set it up, which could be visited on <a href="http://localhost:4000/">http://localhost:4000</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> myblog<br>hexo init myblog<br><span class="hljs-built_in">cd</span> myblog<br>npm install<br>hexo s<br></code></pre></td></tr></table></figure></li></ul><h2 id="Prepare-the-Repository"><a href="#Prepare-the-Repository" class="headerlink" title="Prepare the Repository"></a>Prepare the Repository</h2><p>Create a repository named <code>your_user_name.github.io</code> on Github and create two branches named <code>master</code> and <code>hexo</code>. Note that <code>your_user_name</code> here must be the same as your Github account.</p><h2 id="Add-the-Workflow-File"><a href="#Add-the-Workflow-File" class="headerlink" title="Add the Workflow File"></a>Add the Workflow File</h2><p>Add a file <code>myblog/.github/workflows/deployment</code> to make continuous deployment via GitHub Action.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deployment</span><br><br><span class="hljs-attr">on:</span><br><span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">hexo</span>] <span class="hljs-comment"># only push events on source branch trigger deployment</span><br><br><span class="hljs-attr">jobs:</span><br><span class="hljs-attr">hexo-deployment:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>    <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>    <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;12.x&#x27;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">Generate</span> <span class="hljs-string">static</span> <span class="hljs-string">files</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        node -v</span><br><span class="hljs-string">        npm i -g hexo-cli</span><br><span class="hljs-string">        npm i</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo g</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Github</span> <span class="hljs-string">Pages</span><br>    <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">your_user_name</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your_email</span><br>        <span class="hljs-attr">REPO:</span> <span class="hljs-string">github.com/your_user_name/your_user_name.github.io</span><br>        <span class="hljs-attr">GH_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GH_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>    <span class="hljs-comment"># can be created or changed in the Github/Repository/Setting/Secrets/Actions</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cd ./public &amp;&amp; echo cloudwind.tech &gt; CNAME &amp;&amp; git init &amp;&amp; git add .</span><br><span class="hljs-string">        git config --global user.name $GIT_NAME</span><br><span class="hljs-string">        git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string">        git commit -m &quot;Site deployed by GitHub Actions&quot;</span><br><span class="hljs-string">        git push --force --quiet &quot;https://$GH_TOKEN@$REPO&quot; master:master</span><br></code></pre></td></tr></table></figure><h2 id="Write-Posts-and-Push-Code"><a href="#Write-Posts-and-Push-Code" class="headerlink" title="Write Posts and Push Code"></a>Write Posts and Push Code</h2><ul><li>Write Posts locally and save them in <code>myblog/source/_posts</code>.</li><li>Push the directory <code>myblog</code> to the <code>hexo</code> branch. Note that Since we have set the workflow, whenever we push code, Github Action will help us compile and save all the generated static files in the <code>master</code> branch, which saves us tons of time spent on manually deploying the blog.</li><li>We could also optionally install <a href="https://hexo.io/themes/">blog themes</a>. Now the blog can be visited on the default domain <code>https://your_user_name.github.io</code>, which could be customized to our own domain in the repository setting on Github.</li><li>Enjoy!</li></ul>]]></content>
    
    
    <categories>
      
      <category>Toolkit</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
